Mappings: 
  RegionMap: 
    us-east-1: 
      "HVM64": "ami-0a313d6098716f372"
    us-east-2: 
      "HVM64": "ami-0c55b159cbfafe1f0"
    us-west-1: 
      "HVM64": "ami-06397100adf427136"
    us-west-2: 
      "HVM64": "ami-005bdb005fb00e791"
    ap-south-1: 
      "HVM64": "ami-007d5db58754fa284"
    ap-southeast-1: 
      "HVM64": "ami-0dad20bd1b9c8c004"
    ap-southeast-2: 
      "HVM64": "ami-0b76c3b150c6b1423"
    ap-northeast-1: 
      "HVM64": "ami-0eb48a19a8d81e20b"
    ca-central-1: 
      "HVM64": "ami-01b60a3259250381b"
    eu-west-1: 
      "HVM64": "ami-08d658f84a6d84a80"


Parameters:
  CidrBlock:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.0.0/16
    Description: VPC CIDR Block (eg 10.0.0.0/16)
    Type: String
  AvailabilityZone1:
    Description: The AvailabilityZone to use for the first subnet
    Default: us-east-2a
    Type: String
  AvailabilityZone2:
    Description: The AvailabilityZone to use for the second subnet
    Default: us-east-2b
    Type: String
  PublicSubnetCidr:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.0.0/24
    Description: VPC CIDR Block for the public subnet (eg 10.0.0.0/24)
    Type: String
  PrivateSubnetCidr:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.1.0/24
    Description: VPC CIDR for the private subnet (eg 10.0.0.0/24) 
    Type: String
  key:
    Description : Name of an existing EC2 key pair for SSH access to the EC2 instance
    Type: AWS::EC2::KeyPair::KeyName

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: CidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: sikandarStack


  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: {Ref: AvailabilityZone1}
      CidrBlock: {Ref: PublicSubnetCidr}
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - [{Ref: 'AWS::StackName'},{Ref: AvailabilityZone1}]
      VpcId:   
        Ref: VPC

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: {Ref: AvailabilityZone2}
      CidrBlock: {Ref: PrivateSubnetCidr}
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - [{Ref: 'AWS::StackName'},{Ref: 'AvailabilityZone2'}]
      VpcId:   
        Ref: VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: sikandarStack



  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC



  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: sikandarStack


  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway           
      RouteTableId:
        Ref: RouteTable

  SubnetAssoc1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RouteTable
      SubnetId:
        Ref: Subnet1
  SubnetAssoc2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RouteTable
      SubnetId:
        Ref: Subnet2


  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0    
      Tags:
        - Key: Name
          Value: sikandarStack

#   DBSecurityGroup:
#     Type: AWS::EC2::SecurityGroup
#     Properties:
#       GroupDescription: Allow MySQL to DB
#       SecurityGroupIngress:
#         - IpProtocol: tcp
#           FromPort: 3306
#           ToPort: 3306
#           CidrIp: 0.0.0.0/0
#       VpcId:
#         Ref: VPC
#       Tags:
#         - Key: Name
#           Value: SikadnarDBSecurityGroup






#   webserver:
#     Type: AWS::EC2::Instance
#     Properties:
#       ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
#       InstanceType: t2.micro
#       UserData:
#         Fn::Base64: !Sub 
#         - |
#           #!/bin/bash
#           set -x
#           sleep 2m
#           apt-get -y update
#           apt-get install apache2 -y
#           apt-get install mysql-server -y
#           apt-get install php-mysql -y
#           apt-get install php libapache2-mod-php -y
#           apt-get install zip -y
#           cd /var/www
#           rm -rf html
#           wget https://s3.amazonaws.com/alamkey/html1.zip
#           unzip html1.zip
#           mysql -u sikandar -psikandar -h myrdsdb.ccvyw5hnor6i.us-east-2.rds.amazonaws.com << EOF 
#           USE sikandar;
#           CREATE TABLE users (
#           id INT(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,firstname VARCHAR(30) NOT NULL,lastname VARCHAR(30) NOT NULL,email VARCHAR(50) NOT NULL,age INT(3),location VARCHAR(50),date TIMESTAMP );
#           exit;
#           EOF
#           sed -i -e 's/localhost/${DBEndPoint}/g' /var/www/html/config.php
#         - DBEndPoint: 
#             Fn::GetAtt: [ MyDB,"Endpoint.Address" ] 

#       KeyName:
#         Ref: key
#       SubnetId: 
#         Ref: Subnet1
#       SecurityGroupIds:
#         - !Ref PublicSecurityGroup
#       Tags:
#         - Key: Name
#           Value: WebServer


#   ReadOnlywebserver1:
#     Type: AWS::EC2::Instance
#     Properties:
#       ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
#       InstanceType: t2.micro
#       UserData:
#         Fn::Base64: !Sub 
#         - |
#           #!/bin/bash
#           set -x
#           sleep 2m
#           apt-get -y update
#           apt-get install apache2 -y
#           apt-get install mysql-server -y
#           apt-get install php-mysql -y
#           apt-get install php libapache2-mod-php -y
#           apt-get install zip -y
#           cd /var/www
#           rm -rf html
#           wget https://s3.amazonaws.com/alamkey/html1.zip
#           unzip html1.zip
#           sed -i -e 's/localhost/${ReplicaDBEndPoint}/g' /var/www/html/config.php
#           apt install gcc -y
#           wget http://download.redis.io/redis-stable.tar.gz
#           tar xvzf redis-stable.tar.gz
#           cd redis-stable
#           apt-get install make
#           make distclean 
#           make
#         - ReplicaDBEndPoint: 
#             Fn::GetAtt: [ ReplicaDB,"Endpoint.Address" ] 
#       KeyName:
#         Ref: key
#       SubnetId: 
#         Ref: Subnet1
#       SecurityGroupIds:
#         - !Ref PublicSecurityGroup
#       Tags:
#         - Key: Name
#           Value: ReadOnlyWebServer


#   rdsDBSubnetGroup:
#     Type: AWS::RDS::DBSubnetGroup
#     Properties:
#       DBSubnetGroupDescription: rdsDBSubnetGroup
#       SubnetIds:
#         - !Ref Subnet1
#         - !Ref Subnet2
#       Tags:
#         - Key: Name
#           Value: SikadnarRdsDBSecurityGroup 

#   MyDB:
#     Type: AWS::RDS::DBInstance
#     Properties:
#       DBInstanceIdentifier: myRdsDB
#       DBSubnetGroupName: 
#         Ref: rdsDBSubnetGroup
#       DBName: sikandar
#       VPCSecurityGroups: 
#         - !Ref DBSecurityGroup
#       AllocatedStorage: '5'
#       MultiAZ: true
#       Port: 3306
#       EngineVersion: 5.7.22
#       DBInstanceClass: db.t2.micro
#       Engine: MySQL
#       MasterUsername: sikandar
#       MasterUserPassword: sikandar
#       Tags:
#         - Key: Name
#           Value: SikandarDBIns

#   ReplicaDB:
#     Type: AWS::RDS::DBInstance
#     Properties:
#       DBInstanceIdentifier: myReplicaRds
#       SourceDBInstanceIdentifier: !Ref MyDB
#       DBInstanceClass: db.t2.micro
#       Tags:
#       - Key: Name
#         Value: Read Replica Database

#   ElasticacheComponentSecurityGroup:
#     Type: "AWS::EC2::SecurityGroup"
#     Properties:
#       GroupDescription: "Elasticache security group"
#       SecurityGroupIngress:
#         -
#           IpProtocol: "tcp"
#           FromPort: "6379"
#           ToPort: "6379"
#           SourceSecurityGroupId:
#             Ref: PublicSecurityGroup
#       VpcId:
#         Ref: VPC
#   SubnetGroup: 
#     Type: AWS::ElastiCache::SubnetGroup
#     Properties: 
#       Description: "Cache Subnet Group"
#       SubnetIds: 
#         - Ref: "Subnet1"

#   ElasticacheCluster:
#     Type: AWS::ElastiCache::CacheCluster
#     Properties:
#       CacheSubnetGroupName: !Ref SubnetGroup
#       AutoMinorVersionUpgrade: true
#       Engine: redis
#       EngineVersion: 5.0.4
#       CacheNodeType: cache.t2.micro
#       NumCacheNodes: 1
#       VpcSecurityGroupIds: 
#         - !Ref ElasticacheComponentSecurityGroup
#       Tags:
#         - Key: Name
#           Value: SikandarElasticCache









# Outputs:
#  SubnetValue1:
#    Description: A reference to the created PublicSubnets
#    Value: !Ref Subnet1
#    Export:
#       Name: !Sub "sikandarStack-Subnet1"      

#  PublicSecurityGroup:
#    Description: A reference to the created PublicSecurityGroup
#    Value: !Ref PublicSecurityGroup
#    Export:
#       Name: !Sub "sikandarStack-PublicSecurityGroup"

#  AvailabilityZone1:
#    Description: A reference to the created AvailabilityZone1
#    Value: !Ref AvailabilityZone1
#    Export:
#       Name: !Sub "sikandarStack-AvailabilityZone1"
#  DBEndPoint:
#    Description: A reference to the End point of DBInstance
#    Value: { "Fn::GetAtt": [ "MyDB","Endpoint.Address" ] }
#    Export:
#       Name: !Sub "DBEndPoint"      
